= SQLambda
Shaun Harker <sharker81@gmail.com>
v1.0, 2015-05-18
:toc: right
:source-highlighter: highlight.js
:highlightjs-theme: railscasts
:sourcedir: ../

== Overview

https://github.com/sharker81/SQLambda[SQLambda] is a minimalistic, modern C++ wrapper for the https://www.sqlite.org[SQLite] https://www.sqlite.org/c3ref/intro.html[API]. 

[cols="a,a",options="header",grid="cols"]
|===
| [big teal]*Advantages* | [big teal]*Disadvantages*

|The key features are:

* Uses modern C++ features such as variadic templates and lambda expressions.
* Single file, header-only library.
* RAII abstractions for database connections and prepared statements.
* Reusability of prepared statements for fast batch inserts.
* A smaller API taking advantage of C++ overloading.

|The main disadvantages are:

* No RAII abstraction for transactions
* No support for BLOBs (yet)
* No support for NULL values (yet)
* Error checking needs work
* Not well tested; still experimental
|===


== Tutorial

[source,cpp]
----
include::{sourcedir}/example.cpp[]
----

== API

Our API consists of 2 classes with 4 public methods each. They are as follows:

[cols="a,a"]
|===
|
[source,cpp]
----
class database {
public:
  /// database [API]
  ///   Open a database connection
  database ( std::string const & db_name );

  /// prepare [API]
  ///   Prepare a statement with sql_expr
  statement 
  prepare ( std::string const& sql_expr ) const;

  /// exec [API]
  ///   Immediately execute sql_expr
  ///   Equivalent to "prepare(sql_expr).exec()"
  void 
  exec ( std::string const& sql_expr ) const;

  /// sqlite3* cast [API]
  ///   Return underlying sqlite3* pointer
  ///   This is used to access the SQLite C API
  operator sqlite3* () const;


----
| 
[source,cpp]
----
class statement {
public:
  /// bind [API]
  ///   Bind data to a prepared statement.
  template<typename... Args> statement& 
  bind ( Args... args );

  /// exec [API]
  ///   Execute the statement
  statement& exec ( void );

  /// forEach [API]
  ///   Execute the statement and call 
  ///   "callback" on each resulting row
  template<typename F> statement& 
  forEach ( F const& callback );

  /// sqlite3_stmt* cast [API]
  ///   Return underlying sqlite3_stmt* pointer
  ///   This is used to access the SQLite C API
  operator sqlite3_stmt* () const;
----

|===

A `database` object  wraps `sqlite3` object which SQLite uses to represent database sessions. A `statement` object wraps an `sqlite3_stmt` object which SQLite uses to represent prepared statements. Both of these classes provide casting operators, so the user can get direct access to the objects and call the SQLite C API directly if needs be. 

The `database` and `statement` classes use RAII (http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization[_Resource Acquisition Is Initialization_]); the constructor of each class acquires its resource (database connection or prepared statement) and releases it when the deconstructor is called. Or nearly so. Actually, we use `std::shared_ptr` to hold wrappers ; so if the `database` (respectively, `statement`) object is duplicated, reference counting will prevent one duplicate going out of scope from destroying an object still in scope.

The `database` methods are straightforward to understand. The constructor and casting methods have already been explained. The method `database::prepare` creates a `statement` object. The `database::exec` method is actually just shorthand for creating a `statement` object and calling `statement::exec` on it.

The `statement` methods are only slightly harder to understand. Notice there is no public constructor; a `statement` object must be created by a `database` object. The casting method has already been explained. The `statement::bind` method is used to bind variables to prepared statements. It takes a variadic template argument. This allows it to be called with any sequence of arguments of any types. It will attempt to bind the arguments it is given to the `?` slots that occur in the prepared statement. Any previous bindings will be forgotten. The `statement::exec` function executes the prepared statement. If there is expected output (say, for instance, the prepared statement was a `SELECT` statement), then this is a poor choice. Instead, `statement::forEach` should be called with a callback function as an argument. A callback function can be a lambda function (hence, SQLambda!) which takes arguments corresponding to the columns in the returned rows and returns void (i.e. it operates purely through side effects). 

== Philosophy

The design philosophy behind SQLambda is to provide an efficient pipeline between SQLite database operations and modern-style pass:[C++] programming constructs for the most common use cases. In particular, we want to provide fast mechanisms for repeated inserts with prepared statements, and provide convenient processing of the rows returned by `SELECT` statements. 

No attempt is made to wrap the entire functionality of the SQLite C interface with pass:[C++]. This decision is motivated by the desire to prevent needlessly reinventing the interface language. We simply want to allow modern idioms for common operations. For uncommon operations the well-documented C API provided by SQLite should suffice; for this reason we make sure our interface transparently exposes the underlying C API rather than attempting to invent our own abstractions.

== See Also

There are many other C++ wrappers for SQLite available. I attempt to give a comparison below. Given the difficulty of surveying 15K lines of code it is likely I have misclassified at least one item. Further, some of these projects remain under active development and may gain new features. Finally, the choices of features and their categorization into [green]*good*, [yellow]*ok*, and [red]*bad* are based on my personal bias, so it might not pay to take this too seriously. 


[cols="8",options="header"]
|===
|[big maroon]*Project Name*
|[big maroon]*Creation Date*
|[big maroon]*C++11*
|[big maroon]*Supports NULL*
|[big maroon]*Prepared Statements*
|[big maroon]*Encoding*
|[big maroon]*Installation*
|[big maroon]*SLOC*

|{set:cellbgcolor!}
http://sqlitepp.berlios.de/[SQLite++]
|{set:cellbgcolor!}
2006-01-23
|{set:cellbgcolor:red}
NO
|{set:cellbgcolor:red}
NO
|{set:cellbgcolor:green}
YES
|{set:cellbgcolor:yellow} 
UTF-8 only
|{set:cellbgcolor:red}
Many .h + .cpp
|{set:cellbgcolor!}
~2850

|{set:cellbgcolor!}
http://code.google.com/p/sqdbcpp/[sqdbcpp]
| 2009-12-06
|{set:cellbgcolor:red} 
NO
|{set:cellbgcolor:yellow} 
Write Only
|{set:cellbgcolor:green}
YES
|{set:cellbgcolor:green} 
UTF-8/UTF-16
|{set:cellbgcolor:yellow}
.h + .cpp
|{set:cellbgcolor!}
~1200

|{set:cellbgcolor!}
http://code.google.com/p/easysqlite/[easySQLite]
| 2010-09-16
|{set:cellbgcolor:red} 
NO
|{set:cellbgcolor:red} 
NO
|{set:cellbgcolor:red}
NO
|{set:cellbgcolor:yellow} 
UTF-8 only
|{set:cellbgcolor:red}
Many .h + .cpp
|{set:cellbgcolor!}
~3000

|{set:cellbgcolor!}
http://www.codeproject.com/Articles/6343/CppSQLite-C-Wrapper-for-SQLite/[CppSQLite]
| 2011-06-24
|{set:cellbgcolor:red} 
NO
|{set:cellbgcolor:green} 
YES
|{set:cellbgcolor:green}
YES
|{set:cellbgcolor:yellow} 
UTF-8 only
|{set:cellbgcolor:yellow}
.h + .cpp
|{set:cellbgcolor!}
~1800

|{set:cellbgcolor!}
http://ed.am/dev/sqlite3cc[sqlite3cc]
| 2012-01-23
|{set:cellbgcolor:red} 
NO
|{set:cellbgcolor:yellow} 
Write Only
|{set:cellbgcolor:green}
YES
|{set:cellbgcolor:yellow} 
UTF-8 only
|{set:cellbgcolor:yellow}
2*(.h+.cpp)
|{set:cellbgcolor!}
~3000

|{set:cellbgcolor!}
https://github.com/SRombauts/SQLiteCpp[SQLiteCpp]
| 2012-03-30
|{set:cellbgcolor:red} 
NO
|{set:cellbgcolor:green} 
YES
|{set:cellbgcolor:green}
YES
|{set:cellbgcolor:yellow} 
UTF-8 only
|{set:cellbgcolor:red}
Many .h + .cpp
|{set:cellbgcolor!}
~2000

|{set:cellbgcolor!}
https://github.com/keramer/sqlite_modern_cpp[sqlite_modern_cpp]
| 2014-05-11
|{set:cellbgcolor:green} 
YES
|{set:cellbgcolor:yellow} 
/w BOOST
|{set:cellbgcolor:red}
NO
|{set:cellbgcolor:red} 
UTF-16 only
|{set:cellbgcolor:green}
Headers only
|{set:cellbgcolor!}
~450

|{set:cellbgcolor!}
https://github.com/iwongu/sqlite3pp[sqlite3pp]
| 2014-08-23
|{set:cellbgcolor:green} 
YES
|{set:cellbgcolor:yellow} 
Write Only
|{set:cellbgcolor:green}
YES
|{set:cellbgcolor:yellow} 
UTF-8 only
|{set:cellbgcolor:yellow}
2*(.h + .cpp)
|{set:cellbgcolor!}
~1300


|{set:cellbgcolor!}
SQLambda
| 2015-05-18
|{set:cellbgcolor:green} 
YES
|{set:cellbgcolor:red} 
NO
|{set:cellbgcolor:green}
YES
|{set:cellbgcolor:yellow} 
UTF-8 only
|{set:cellbgcolor:green}
Header only
|{set:cellbgcolor!}
~350

|===


:cellbgcolor!:

